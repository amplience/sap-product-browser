import { ClientConnection } from 'message.io';
import { Frame } from './Frame';
import { MediaLink } from './MediaLink';
import { ContentLink } from './ContentLink';
import { ContentItem } from './ContentItem';
import { ContentReference } from './ContentReference';
import { LocalesModel } from './models/Locales';
import { Field } from './Field';
import { Form } from './Form';
export interface IClientConnection extends ClientConnection {
}
/**
 * Expected format for the provided options
 */
export interface OptionsObject {
    window?: Window;
    connectionTimeout?: number;
    debug?: boolean;
}
export interface Options {
    window: Window;
    connectionTimeout: number;
    debug: boolean;
}
export interface Params {
    instance: object;
    installation: object;
}
export declare class SDK<FieldType = any, ParamType extends Params = Params> {
    /**
     * message.io [[ClientConnection]] instance. Use to listen to any of the message.io lifecycle events.
     */
    connection: ClientConnection;
    /**
     * Content Item - The model of the Content Item that is being edited.
     */
    contentItem: ContentItem;
    /**
     * Field - Allows you to get and set the value of the field the extension is control of.
     */
    field: Field<FieldType, ParamType>;
    /**
     * Frame - Use to control the height sizing behaviour of your extension.
     */
    frame: Frame;
    /**
     * Params - optional paramaters for your extension.
     */
    params: ParamType;
    /**
     * Locales - The locales you currently have available.
     */
    locales: LocalesModel;
    /**
     * Content Link - Use to open a content browser.
     */
    contentLink: ContentLink;
    /**
     * Content Reference - Use to open a content browser.
     */
    contentReference: ContentReference;
    /**
     * Media Link - Use to open a media browser.
     */
    mediaLink: MediaLink;
    /**
     * Form - controls over the form such as readonly change handlers.
     */
    form: Form;
    /**
     * stagingEnvironment - Used for accessing staged assets.
     */
    stagingEnvironment: string;
    /**
     * Visualisation - URL of the visualisation
     */
    visualisation: string;
    protected options: Options;
    protected readonly defaultOptions: Options;
    /**
     * The SDK instance is the central place for all SDK methods. It takes an optional options object.
     * @param options
     */
    constructor(options?: OptionsObject);
    /**
     * Initialiser. Returns a promise that resolves to an instance of the SDK.
     */
    init(): Promise<SDK<FieldType, ParamType>>;
    private setupContext;
    private requestContext;
}
