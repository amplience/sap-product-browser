import { ClientConnection } from 'message.io';
import { ObjectMap } from './models/ContentItemModel';
import { ErrorReport } from './models/ErrorReport';
import { Params } from './SDK';
export declare type FieldSchema<ParamType extends Params = Params> = ObjectMap<{
    title: string;
    type: string;
    description?: string;
    ['ui:extension']: UiExtension<ParamType>;
}>;
interface UiExtension<ParamType extends Params = Params> {
    url: string;
    params?: ParamType['instance'];
    height?: number;
}
export declare class Field<FieldType = {}, ParamType extends Params = Params> {
    private connection;
    schema: FieldSchema<ParamType>;
    /**
     * Allows you to perform actions on the field that is being edited.
     * @param connection message.io connection
     * @param schema JSON Schema of the field
     */
    constructor(connection: ClientConnection, schema: FieldSchema<ParamType>);
    /**
     * Fetch the value of the field
     */
    getValue(): Promise<FieldType>;
    /**
     * Change the value of the field
     * @param value The new value you want to set on the field
     */
    setValue(value?: FieldType): Promise<[ErrorReport] | void>;
    /**
     * Check if your value is valid
     * @param value The value you wish to test
     */
    isValid(value: FieldType): Promise<Boolean>;
    /**
     * Check the validation of your value. Returns an array containing any JSON Schema errors found.
     * @param value The value you whish to test
     */
    validate(value: FieldType): Promise<[ErrorReport] | void>;
    /**
     * Reset the value to the previously loaded state
     */
    reset(): Promise<FieldType>;
}
export {};
