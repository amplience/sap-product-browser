"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Operator_1 = require("./Operator");
var Connection_1 = require("./Connection");
var TestHelpers_1 = require("./TestHelpers");
var mio = new Operator_1.Operator();
describe('mio', function () {
    it('should be an instance of Operator', function () {
        expect(mio instanceof Operator_1.Operator).toBeTruthy();
    });
    it('a connection should be an instance of Connection', function () {
        var connection = mio.connect();
        expect(connection instanceof Connection_1.Connection).toBeTruthy();
    });
    it('it should emit an connection event', function (done) {
        var frame = TestHelpers_1.createIframe('./base/src/frame.html');
        var connection = mio.connect(frame);
        connection.on(Connection_1.MIO_EVENTS.CONNECTED, function (data) {
            expect(data).toBeUndefined();
            TestHelpers_1.removeIframe(frame);
            done();
        });
        TestHelpers_1.appendIframe(frame);
    });
    it('it should return the data that was sent to it', function (done) {
        var frame = TestHelpers_1.createIframe('./base/src/frame.html');
        var requestJSON = {
            hello: 'there',
            test: true
        };
        var connection = mio.connect(frame);
        connection
            .request('passthrough', requestJSON)
            .then(function (dataReturned) {
            expect(dataReturned).toEqual(requestJSON);
            TestHelpers_1.removeIframe(frame);
            done();
        })
            .catch(done.fail);
        TestHelpers_1.appendIframe(frame);
    });
    it('it should catch when response rejects', function (done) {
        var frame = TestHelpers_1.createIframe('./base/src/frame.html');
        var requestJSON = {
            hello: 'there',
            test: true
        };
        var connection = mio.connect(frame);
        connection
            .request('passthrough-fail', requestJSON)
            .then(done.fail)
            .catch(function (error) {
            expect(error).toEqual(requestJSON);
            TestHelpers_1.removeIframe(frame);
            done();
        });
        TestHelpers_1.appendIframe(frame);
    });
});
//# sourceMappingURL=message.io.spec.js.map