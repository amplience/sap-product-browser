"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ClientConnection_1 = require("../src/ClientConnection");
var ServerConnection_1 = require("../src/ServerConnection");
var Connection_1 = require("../src/Connection");
var TestHelpers_1 = require("./TestHelpers");
describe('Client', function () {
    it('adds a window message listener', function () {
        var windowEvent = spyOn(window, 'addEventListener');
        new ClientConnection_1.ClientConnection();
        expect(windowEvent).toHaveBeenCalled();
        expect(windowEvent).toHaveBeenCalledTimes(1);
        expect(windowEvent).toHaveBeenCalledWith('message', jasmine.any(Function));
    });
    it('should receive a message event with a port', function (done) {
        var frame = TestHelpers_1.createIframe('./base/src/frame.html');
        new ServerConnection_1.ServerConnection(frame);
        frame.onload = function () {
            if (!frame.contentWindow) {
                return;
            }
            frame.contentWindow.addEventListener('message', function (event) {
                expect(event.constructor.name).toEqual('MessageEvent');
                expect(event.ports[0].constructor.name).toEqual('MessagePort');
                TestHelpers_1.removeIframe(frame);
                done();
            });
        };
        TestHelpers_1.appendIframe(frame);
    });
    it('should fire a connection timeout event', function (done) {
        var frame = TestHelpers_1.createIframe('./base/src/frame.html');
        frame.onload = function () {
            if (!frame.contentWindow) {
                return;
            }
            var window = frame.contentWindow;
            window.connection.on(Connection_1.MIO_EVENTS.CONNECTION_TIMEOUT, function () {
                done();
            });
        };
        TestHelpers_1.appendIframe(frame);
    });
    it('should initiate when it has received a message event and remove listener', function (done) {
        var frame = TestHelpers_1.createIframe('./base/src/frame.html');
        var connection = new ServerConnection_1.ServerConnection(frame);
        var clientRemove;
        frame.onload = function () {
            if (!frame.contentWindow) {
                return;
            }
            var window = frame.contentWindow;
            clientRemove = spyOn(window, 'removeEventListener');
        };
        connection.on(Connection_1.MIO_EVENTS.CONNECTED, function () {
            expect(clientRemove).toHaveBeenCalled();
            expect(clientRemove).toHaveBeenCalledTimes(1);
            expect(clientRemove).toHaveBeenCalledWith('message', jasmine.any(Function));
            TestHelpers_1.removeIframe(frame);
            done();
        });
        TestHelpers_1.appendIframe(frame);
    });
    it('should receive a message from the parent', function (done) {
        var frame = TestHelpers_1.createIframe('./base/src/frame.html');
        var connection = new ServerConnection_1.ServerConnection(frame);
        frame.addEventListener('load', function () {
            if (!frame.contentWindow || !frame.src) {
                return;
            }
            var window = frame.contentWindow;
            window.connection.on('event', function (arg) {
                expect(arg).toBeUndefined();
                TestHelpers_1.removeIframe(frame);
                done();
            });
        });
        connection.emit('event');
        TestHelpers_1.appendIframe(frame);
    });
    it('should receive a message from the parent with data', function (done) {
        var frame = TestHelpers_1.createIframe('./base/src/frame.html');
        var connection = new ServerConnection_1.ServerConnection(frame);
        var payload = { hello: 'there' };
        frame.addEventListener('load', function () {
            if (!frame.contentWindow || !frame.src) {
                return;
            }
            var window = frame.contentWindow;
            window.connection.on('event', function (rcv) {
                expect(rcv).toEqual(payload);
                TestHelpers_1.removeIframe(frame);
                done();
            });
        });
        connection.emit('event', payload);
        TestHelpers_1.appendIframe(frame);
    });
});
//# sourceMappingURL=ClientConnection.spec.js.map