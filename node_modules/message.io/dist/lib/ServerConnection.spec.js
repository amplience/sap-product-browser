"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ServerConnection_1 = require("./ServerConnection");
var Connection_1 = require("./Connection");
var TestHelpers_1 = require("./TestHelpers");
describe('Server', function () {
    it('attaches an event listener to the frame', function () {
        var frame = TestHelpers_1.createIframe();
        var frameEvent = spyOn(frame, 'addEventListener');
        new ServerConnection_1.ServerConnection(frame);
        expect(frameEvent).toHaveBeenCalled();
        expect(frameEvent).toHaveBeenCalledTimes(1);
    });
    it("doesn't attach an event listener to the frame if option:onload is false", function () {
        var frame = TestHelpers_1.createIframe('./base/src/frame.html');
        var frameEvent = spyOn(frame, 'addEventListener');
        new ServerConnection_1.ServerConnection(frame, { onload: false });
        expect(frameEvent).not.toHaveBeenCalled();
    });
    it('calls init when the frame is loaded and initiation is completed', function (done) {
        var frame = TestHelpers_1.createIframe('./base/src/frame.html');
        var server = new ServerConnection_1.ServerConnection(frame);
        var serverInit = spyOn(server, 'init');
        frame.onload = function () {
            expect(serverInit).toHaveBeenCalled();
            expect(serverInit).toHaveBeenCalledTimes(1);
            TestHelpers_1.removeIframe(frame);
            done();
        };
        TestHelpers_1.appendIframe(frame);
    });
    it('only initiates when a postmessage message is received, and clientInitiates = true', function (done) {
        var frame = TestHelpers_1.createIframe('./base/src/frame.html');
        var server = new ServerConnection_1.ServerConnection(frame, {
            onload: false,
            clientInitiates: true
        });
        var serverInit = spyOn(server, 'init');
        frame.onload = function () {
            if (frame.contentWindow) {
                expect(serverInit).not.toHaveBeenCalled();
                frame.contentWindow.connection.init();
            }
        };
        window.addEventListener('message', function (e) {
            expect(serverInit).toHaveBeenCalled();
            TestHelpers_1.removeIframe(frame);
            done();
        });
        TestHelpers_1.appendIframe(frame);
    });
    it('is set to connected if connection event is sent', function (done) {
        var frame = TestHelpers_1.createIframe('./base/src/frame.html');
        var server = new ServerConnection_1.ServerConnection(frame);
        server.on(Connection_1.MIO_EVENTS.CONNECTED, function () {
            expect(server.connected).toBeTruthy();
            TestHelpers_1.removeIframe(frame);
            done();
        });
        TestHelpers_1.appendIframe(frame);
    });
    it('should not complete init if an empty frame is loaded', function (done) {
        var frame = TestHelpers_1.createIframe();
        var server = new ServerConnection_1.ServerConnection(frame);
        frame.onload = function () {
            setTimeout(function () {
                expect(server.connected).toBeFalsy();
                TestHelpers_1.removeIframe(frame);
                done();
            }, 1);
        };
        TestHelpers_1.appendIframe(frame);
    });
    it('should fire a connection timed out event if no client connects', function (done) {
        var frame = TestHelpers_1.createIframe();
        var server = new ServerConnection_1.ServerConnection(frame, { onload: false });
        server.on(Connection_1.MIO_EVENTS.CONNECTION_TIMEOUT, function (evt) {
            expect(evt.message).toEqual('Connection timed out while waiting for connection.');
            TestHelpers_1.removeIframe(frame);
            done();
        });
        TestHelpers_1.appendIframe(frame);
    });
    it('should fire a connection timed out event if client doesnt initiate', function (done) {
        var frame = TestHelpers_1.createIframe();
        var server = new ServerConnection_1.ServerConnection(frame, { clientInitiates: true });
        server.on(Connection_1.MIO_EVENTS.CONNECTION_TIMEOUT, function (evt) {
            expect(evt.message).toEqual('Connection timed out while waiting for initiation from client.');
            TestHelpers_1.removeIframe(frame);
            done();
        });
        TestHelpers_1.appendIframe(frame);
    });
    it("should fire a connection timed out event if page doesn't load", function (done) {
        // if the connectionTimout is less than the time it takes to load the url it should pass
        var frame = TestHelpers_1.createIframe('https://github.com/');
        var server = new ServerConnection_1.ServerConnection(frame, { connectionTimeout: 100 });
        server.on(Connection_1.MIO_EVENTS.CONNECTION_TIMEOUT, function (evt) {
            expect(evt.message).toEqual('Connection timed out while waiting for iframe to load.');
            TestHelpers_1.removeIframe(frame);
            done();
        });
        TestHelpers_1.appendIframe(frame);
    });
    it('should only be initialised once the handshake is received from the child', function (done) {
        var frame = TestHelpers_1.createIframe('./base/src/frame.html');
        var server = new ServerConnection_1.ServerConnection(frame);
        server.on(Connection_1.MIO_EVENTS.CONNECTED, function () {
            expect(server.connected).toBeTruthy();
            TestHelpers_1.removeIframe(frame);
            done();
        });
        TestHelpers_1.appendIframe(frame);
    });
    it('should receive a MIO_EVENTS.DISCONNECTED event when the iframe reloads', function (done) {
        var frame = TestHelpers_1.createIframe('./base/src/frame.html');
        var server = new ServerConnection_1.ServerConnection(frame);
        var setOnce = false;
        server.on(Connection_1.MIO_EVENTS.CONNECTED, function () {
            if (!setOnce) {
                frame.src = '/404.html';
                setOnce = true;
            }
        });
        server.on(Connection_1.MIO_EVENTS.DISCONNECTED, function (arg) {
            expect(arg).toBeUndefined();
            TestHelpers_1.removeIframe(frame);
            done();
        });
        TestHelpers_1.appendIframe(frame);
    });
    it('should receive all the messages asked for even if the iframe reloads', function (done) {
        var frame = TestHelpers_1.createIframe('./base/src/frame.html');
        var server = new ServerConnection_1.ServerConnection(frame);
        var count = 0;
        var _loop_1 = function (i) {
            if (i === 1) {
                frame.src = '/404.html';
            }
            if (i === 8) {
                frame.src = './base/src/frame.html';
            }
            server
                .request('passthrough')
                .then(function () {
                if (i === 9) {
                    expect(count).toEqual(9);
                    TestHelpers_1.removeIframe(frame);
                    done();
                }
                count++;
            })
                .catch(done.fail);
        };
        for (var i = 0; i < 10; i++) {
            _loop_1(i);
        }
        TestHelpers_1.appendIframe(frame);
    });
});
//# sourceMappingURL=ServerConnection.spec.js.map