"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Operator_1 = require("../src/Operator");
var ClientConnection_1 = require("../src/ClientConnection");
var ServerConnection_1 = require("../src/ServerConnection");
var TestHelpers_1 = require("./TestHelpers");
describe('Operator', function () {
    it('creates a client connection without an iframe', function () {
        var op = new Operator_1.Operator();
        var connection = op.connect();
        expect(connection instanceof ClientConnection_1.ClientConnection).toBeTruthy();
    });
    it('creates a server connection with an iframe', function () {
        var frame = TestHelpers_1.createIframe();
        var op = new Operator_1.Operator();
        var connection = op.connect(frame);
        expect(connection instanceof ServerConnection_1.ServerConnection).toBeTruthy();
    });
    it('closes a connection', function () {
        var frame = TestHelpers_1.createIframe('./base/src/frame.html');
        var op = new Operator_1.Operator();
        var connection = op.connect(frame);
        var spyClose = spyOn(connection, 'close');
        op.close(connection);
        expect(spyClose).toHaveBeenCalled();
    });
    it('emits to all connections', function () {
        var frame = TestHelpers_1.createIframe();
        var op = new Operator_1.Operator();
        var connection1 = op.connect(frame);
        var connection2 = op.connect(frame);
        var spyEmit1 = spyOn(connection1, 'emit');
        var spyEmit2 = spyOn(connection2, 'emit');
        op.emit('event');
        expect(spyEmit1).toHaveBeenCalled();
        expect(spyEmit2).toHaveBeenCalled();
    });
    it("doesn't emit to closed connections", function () {
        var frame = TestHelpers_1.createIframe();
        var op = new Operator_1.Operator();
        var connection1 = op.connect(frame);
        var connection2 = op.connect(frame);
        var spyEmit1 = spyOn(connection1, 'emit');
        var spyEmit2 = spyOn(connection2, 'emit');
        op.close(connection1);
        op.emit('event');
        expect(spyEmit1).not.toHaveBeenCalled();
        expect(spyEmit2).toHaveBeenCalled();
    });
    it('calls request on all connections when using request', function () {
        var frame = TestHelpers_1.createIframe();
        var op = new Operator_1.Operator();
        var connection1 = op.connect(frame);
        var connection2 = op.connect(frame);
        var spyRequest1 = spyOn(connection1, 'request');
        var spyRequest2 = spyOn(connection2, 'request');
        var promiseArray = op.request('resolve-after', 0);
        expect(spyRequest1).toHaveBeenCalled();
        expect(spyRequest2).toHaveBeenCalled();
        expect(promiseArray.length).toEqual(2);
    });
    it('calls request on all connections when using requestAll', function () {
        var frame = TestHelpers_1.createIframe();
        var op = new Operator_1.Operator();
        var connection1 = op.connect(frame);
        var connection2 = op.connect(frame);
        var spyRequest1 = spyOn(connection1, 'request');
        var spyRequest2 = spyOn(connection2, 'request');
        var promise = op.requestAll('resolve-after', 0);
        expect(spyRequest1).toHaveBeenCalled();
        expect(spyRequest2).toHaveBeenCalled();
        expect(promise instanceof Promise).toBeTruthy();
    });
    it('calls request on all connections when using Operator.requestRace()', function () {
        var frame = TestHelpers_1.createIframe();
        var op = new Operator_1.Operator();
        var connection1 = op.connect(frame);
        var connection2 = op.connect(frame);
        var spyRequest1 = spyOn(connection1, 'request');
        var spyRequest2 = spyOn(connection2, 'request');
        var promise = op.requestRace('resolve-after', 0);
        expect(spyRequest1).toHaveBeenCalled();
        expect(spyRequest2).toHaveBeenCalled();
        expect(promise instanceof Promise).toBeTruthy();
    });
    it('resolves with all data when using Operator.requestAll()', function (done) {
        var frame = TestHelpers_1.createIframe('./base/src/frame.html');
        var frame2 = TestHelpers_1.createIframe('./base/src/frame.html');
        var timeoutPayload = 100;
        var op = new Operator_1.Operator();
        op.connect(frame);
        op.connect(frame2);
        var promise = op.requestAll('resolve-after', timeoutPayload);
        promise
            .then(function (data) {
            expect(data instanceof Array).toBeTruthy();
            expect(data.length).toEqual(2);
            expect(data[0]).toEqual(timeoutPayload);
            expect(data[1]).toEqual(timeoutPayload);
            TestHelpers_1.removeIframe(frame);
            TestHelpers_1.removeIframe(frame2);
            done();
        })
            .catch(function (error) { });
        TestHelpers_1.appendIframe(frame);
        TestHelpers_1.appendIframe(frame2);
    });
    it('rejects on the first promise rejection when using Operator.requestAll()', function (done) {
        var frame = TestHelpers_1.createIframe('./base/src/frame.html');
        var frame2 = TestHelpers_1.createIframe('./base/src/frame.html');
        var timeoutPayload = 100;
        var op = new Operator_1.Operator();
        op.connect(frame);
        op.connect(frame2);
        var promise = op.requestAll('reject-after', timeoutPayload);
        promise
            .then(function () { })
            .catch(function (data) {
            expect(data instanceof Array).toBeFalsy();
            expect(data).toEqual(timeoutPayload);
            TestHelpers_1.removeIframe(frame);
            TestHelpers_1.removeIframe(frame2);
            done();
        });
        TestHelpers_1.appendIframe(frame);
        TestHelpers_1.appendIframe(frame2);
    });
    it('resolves on the first promise when using Operator.requestRace()', function (done) {
        var frame = TestHelpers_1.createIframe('./base/src/frame.html');
        var frame2 = TestHelpers_1.createIframe('./base/src/frame.html');
        var timeoutPayload = 100;
        var op = new Operator_1.Operator();
        op.connect(frame);
        op.connect(frame2);
        var promise = op.requestRace('resolve-after', timeoutPayload);
        promise.then(function (data) {
            expect(data instanceof Array).toBeFalsy();
            expect(data).toEqual(timeoutPayload);
            TestHelpers_1.removeIframe(frame);
            TestHelpers_1.removeIframe(frame2);
            done();
        });
        TestHelpers_1.appendIframe(frame);
        TestHelpers_1.appendIframe(frame2);
    });
    it('rejects on the first promise rejection when using Operator.requestRace()', function (done) {
        var frame = TestHelpers_1.createIframe('./base/src/frame.html');
        var frame2 = TestHelpers_1.createIframe('./base/src/frame.html');
        var timeoutPayload = 100;
        var op = new Operator_1.Operator();
        op.connect(frame);
        op.connect(frame2);
        var promise = op.requestRace('reject-after', timeoutPayload);
        promise
            .then(function () { })
            .catch(function (data) {
            expect(data instanceof Array).toBeFalsy();
            expect(data).toEqual(timeoutPayload);
            TestHelpers_1.removeIframe(frame);
            TestHelpers_1.removeIframe(frame2);
            done();
        });
        TestHelpers_1.appendIframe(frame);
        TestHelpers_1.appendIframe(frame2);
    });
    it('returns a promise array when using Operator.resolve()', function (done) {
        var frame = TestHelpers_1.createIframe('./base/src/frame.html');
        var frame2 = TestHelpers_1.createIframe('./base/src/frame.html');
        var timeoutPayload = 100;
        var op = new Operator_1.Operator();
        op.connect(frame);
        op.connect(frame2);
        var promises = op.request('resolve-after', timeoutPayload);
        expect(promises instanceof Array).toBeTruthy();
        expect(promises.length).toEqual(2);
        expect(promises[0] instanceof Promise).toBeTruthy();
        Promise.all(promises).then(function (data) {
            expect(data instanceof Array).toBeTruthy();
            expect(data.length).toEqual(2);
            expect(data[0]).toEqual(timeoutPayload);
            expect(data[1]).toEqual(timeoutPayload);
            TestHelpers_1.removeIframe(frame);
            TestHelpers_1.removeIframe(frame2);
            done();
        });
        TestHelpers_1.appendIframe(frame);
        TestHelpers_1.appendIframe(frame2);
    });
});
//# sourceMappingURL=Operator.spec.js.map